my_seq <- seq(5,10,length=30)
length(my_seq)
length(1:length(my_seq))
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect(0.5,55,-10,6)
c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char, "your_name_here")
play()
my_name <- c(my_char,"Josh")
nxt()
my_name
paste(my_name, collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z",sep=""))
paste(1:3,c("X","Y","Z"),sep=""))
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
bye()
swirl()
lol()
swirl
swirl()
library("swirl")
swirl()
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
find.package("devtools")
intall.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
mean(x)
rm(x)
mean(x)
traceback()
lm(y ~ x)
traceback()
# Debug
debug(lm)
lm(y ~ x)
read.csv("nosuchfile")
options(error=recover)
read.csv("nosuchfile")
swirl()
install.packages("swirl")
load(swirl)
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
swirl()
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors
)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
killyourselfakakljkladslsdfjkjklkajdfjkldjklsdfskldfjsdfjkldfsjkdfjkldfkljsjklfajklsdf;laskdjfalsjdfalsjdflsjdfjsldkfjsldfjsldjflsjdflskdjfljsd;lakjsd;lfajks;dlkfjal;sjkdfa;lksjdfalksjdfalksjdfa;lsdjfa;ljksdf;alsjkdf;alsjkdf;alkjsdf;lajksd;flajksd;lfjka;sldfjka;sldjf;alsdjf;lajksdf;lakjsdfl;ajksdfljkasdl;kfja;sldkfj alakjdl;sk jasd alksdj
;lkjasdfoeirkjfmrjfutjykgujrhghgippqowieurupoiqweruqpwoeiruqwerpoiquweroipuqwertyuiop]
qwertyuiopasdfghjklzxcvbnm()
abcdefghijklmnopqrstuvwxyz()
letters
letters()
letters[3]
d$GC.binned
# Get your working directory in order with getwd() and setwd("")
d <- read.csv("Dataset_S1.txt") # Load data
OG
b <- read.csv("BinaryOG.csv")
getwd()
setwd("/Users/joshd/Desktop/")
write.csv(x=a, file="BinaryOG.csv")
b <- read.csv("BinaryOG.csv")
rm(list=ls())
b <- read.csv("BinaryOG.csv")
b[1] <- NULL
OG <- b[1]
OG[1]
OG[2]
OG <- as.vector(b[1])
OG
OG[2]
OG <- as.data.frame.vector(b[1])
OG
OG <- as.data.frame(b[1])
OG
OG[2]
OG <- as.character(b[1])
OG
b <- read.csv("BinaryOG.csv")
b[1] <- NULL
OG <- b[1]
OG[1,2]
OG[3,2]
OG
str(OG)
?as.vector
as.vector(OG)
OG
as.array(OG)
as.numeric(OG)
factor(OG)
is.list(OG)
is.vector(OG)
as.vector(OG)
is.vector(as.vector(OG))
OG <- b[1,]
OG
OG <- b[,1]
OG
OG[2]
OG[12]
OG <- b[,1]
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
next
} else {
OG[i] <- NULL
}
}
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
next()
} else {
OG[i] <- ""
}
}
OG
warnings()
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
next()
} else {
OG[i] <- "-"
}
}
warnings()
OG
z <- NULL
z[1] <- "asdf"
z[2] <- "asf"
c[1] <- "asdf"
d[1] <- "awwe"
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
c[i] <- OG[i]
} else {
c[i] <- "X"
}
}
z <- NULL
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
z[i] <- OG[i]
} else {
z[i] <- "X"
}
}
z
OG[2]
str(z)
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
z[i] <- OG[i]
} else {
z[i] <- NA
}
}
z
OG
b <- read.csv("BinaryOG.csv")
b[1] <- NULL
OG <- b[,1]
z <- NULL
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
z[i] <- OG[i]
} else {
z[i] <- NA
}
}
OG[!is.na(OG)]
is.na(OG)
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
z[i] <- TRUE
} else {
z[i] <- FALSE
}
}
z
OG
OG[z]
as.logical(z)
OG[as.logical(z)]
write.csv(x=OG[as.logical(z)], file="FullRepOG.csv")
find.FullRepOrthoGroups <- function(OrthoGroups) {
a <- OrthoGroups
for (i in 2:length(a)) {
for (j in 1:length(a$X)) {
if(a[j,i] == "") {
a[j,i] <- 0
} else {
a[j,i] <- 1
}
}
}
write.csv(x=a, file="BinaryOG.csv")
b <- read.csv("BinaryOG.csv")
b[1] <- NULL
OG <- b[,1]
z <- NULL
for (i in 1:length(b$X)) {
sumOG <- sum(b[i,2:length(b)])
if (sumOG == length(names(b))-1) {
z[i] <- TRUE
} else {
z[i] <- FALSE
}
}
write.csv(x=OG[as.logical(z)], file="FullRepOG.csv")
}
a
b
a <- read.csv("sadman.csv")
dirname(asdf)
c <- read.csv("FullRepOG.csv")
c
c[1] <- NULL
c
args(dir.create)
paste(getwd(),"/Incomplete")
paste(getwd(),"/Incomplete",sep="")
dir.create(paste(getwd(),"/IncompleteOGs",sep=""))
paste(getwd(),"/IncompleteOGs",sep="")
c$x
dirname()
d <- paste(getwd(),"/IncompleteOGs",c[i],sep="")
d <- paste(getwd(),"/IncompleteOGs",c[1],sep="")
d
c[1]
c[1] <- c[,1]
c[1]
c <- c[,1]
c[1]
c[4]
d <- paste(getwd(),"/IncompleteOGs",c[1],sep="")
d
d <- paste(getwd(),"/IncompleteOGs/",c[1],sep="")
d
fromdir <- paste(getwd(),"/Gene_Trees/",c[i])
rm(d)
fromdir
fromdir <- paste(getwd(),"/Gene_Trees/",c[i],sep="")
todir <- paste(getwd(),"/IncompleteOGs/",c[i],sep="")
fromdir
c[i]
# Clean outcome data
o <- read.csv("outcome-of-care-measures.csv")
getwd()
setwd("/Users/joshd/Desktop/grunt-work/Coursera/DataScienceJohnHopkins/02-R_Programming/")
ls()
rm(list=ls())
ls()
# Clean outcome data
o <- read.csv("outcome-of-care-measures.csv")
setwd("ProgrammingAssignment3/")
# Clean outcome data
o <- read.csv("outcome-of-care-measures.csv")
o[c(1,3:6,8:10,12:16,18:22,24:46)] <- NULL
names(o) <- c("name","state","heart attack","heart failure","pneumonia")
p <- o[o$state == "TX",]
p
p$`heart failure` <- NULL
p$pneumonia <- NULL
q <- split(p,p$`heart attack`,drop=TRUE)
q$`Not Available` <- NULL
unsplit(q)
?unsplit
unsplit(q$`12.0`)
factor(q)
str(q)
unsplit(q,`heart attack`)
unsplit(q,q$`12.0`$`heart attack``heart attack`)
unsplit(q,q$`12.0`$`heart attack`)
split(q,p$`heart attack`)
sort(q)
sort(q$`12.0`)
sort(q$`13.7`)
names(q)
jlength(names(q))
length(names(q))
length(q)
q
q[2]
q[5]
q[6]
sort(q[6])
t <- q[6]
t<- q[6,]
t<- q[,6]
t<- q[,6]
q[,6]
q
q[6][4]
q[6][1]
q[6][2]
q[6]
unlist(q[6])
q[6]
q[5]
sort(q[6], name)
attach(q[6])
q[6]
name
`13.5`
r <- attach(q[6])
r
r <- q[6]
r
r[1]
r[,1]
r[1,]
r,
r$`13.5`$`heart attack`
unlist(r)
unsplit(r)
unsplit(r,r[1])
r[1]
r[1,1]
str(r)
unlist(r)
unlist(r[1])
as.vector(r)
r
as.array(r)
as.data.frame(r)
as.data.frame(r)$13.5
s <- as.data.frame(r)
s[1]
sort[s]
sort(s)
sort(s[1])
s[1]
as.data.frame(q)
s[2,1
]
sort(s[,1])
r <- as.data.frame(q[6])
r
r <- sort(r[,1])
r
?append
?write.csv
r
write.csv(r,"HosLs.csv")
write.csv(r,"HosLs.csv",append=TRUE)
r <- as.data.frame(q[i])
r <- as.data.frame(q[1])
r <- sort(r[,1])
r
write.csv(r,"HosLs.csv",append=TRUE)
write.csv(x=r,file="HosLs.csv",append=TRUE)
write.table(x=r,file="HosLs.csv",append=TRUE)
write.table(x=r,file="HosLs",append=TRUE)
r <- as.data.frame(q[2])
r <- sort(r[,1])
write.table(x=r,file="HosLs",append=TRUE)
r <- as.data.frame(q[1])
r <- sort(r[,1])
write.table(x=r,file="HosLs",append=TRUE,col.names=FALSE,row.names=FALSE)
r <- as.data.frame(q[2])
r <- sort(r[,1])
write.table(x=r,file="HosLs",append=TRUE,col.names=FALSE,row.names=FALSE)
for (i in 1:length(q)) {
r <- as.data.frame(q[i])
r <- sort(r[,1])
write.table(x=r,file="HosLs",append=TRUE,col.names=FALSE,row.names=FALSE)
}
for (i in 1:length(q)) {
r <- as.data.frame(q[i])
r <- sort(r[,1])
write.table(x=r,file="HosLs.csv",append=TRUE,col.names=FALSE,row.names=FALSE)
}
q <- read.csv("HosLs.csv",header=FALSE)
s <- read.csv("HosLs.csv",header=FALSE)
s
num <- 2
s[2]
s[,2]
s
s[,2]
s[2,]
s[num,]
s[length(s),]
length(s)
length(s[1])
length(s[1,])
length(s[,1])
s[length(s[,1])]
s[length(s[,1]),]
# Clean outcome data
o <- read.csv("outcome-of-care-measures.csv")
o[c(1,3:6,8:10,12:16,18:22,24:46)] <- NULL
names(o) <- c("name","state","heart attack","heart failure","pneumonia")
p <- o[o$state == "TX",]
p$`heart attack` <- NULL
p$pneumonia <- NULL
q <- split(p,p$`heart failure`,drop=TRUE)
q$`Not Available` <- NULL
for (i in 1:length(q)) {
r <- as.data.frame(q[i])
r <- sort(r[,1])
write.table(x=r,file="HosLs.csv",append=TRUE,col.names=FALSE,row.names=FALSE)
}
s <- read.csv("HosLs.csv",header=FALSE)
s
p$`heart attack` <- NULL
p$pneumonia <- NULL
# Clean outcome data
o <- read.csv("outcome-of-care-measures.csv")
o[c(1,3:6,8:10,12:16,18:22,24:46)] <- NULL
o
names(o)
names(o) <- c("name","state","heart attack","heart failure","pneumonia")
p <- o[o$state == "TX",]
names(p)
p$`heart attack` <- NULL
p$pneumonia <- NULL
p
q <- split(p,p$`heart failure`,drop=TRUE)
q
q$`Not Available` <- NULL
q
q
q[1]
q[2]
q[6]
q[65]
names(q)
as.numeric(names(q))
q
?split
r <- as.data.frame(q[i])
r
write.table(x=r,file="HosLs.csv",append=TRUE,col.names=FALSE,row.names=FALSE)
?sort
